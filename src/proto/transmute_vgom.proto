syntax = "proto3";
package transmute.protocol.gom;

option optimize_for = LITE_RUNTIME; /** Use lite runtime */
option csharp_namespace = "TransmuteProtocol.GOM"; /** C# namespace */

/**
 * VirtualVector3 is a 3D vector descriptor to be used in position and scale properties.
 */
message VirtualVector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

/**
 * VirtualQuaternion is a quaternion descriptor to be used in rotation properties.
 */
message VirtualQuaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

/**
 * VirtualTransform is a transform descriptor to be used in game object properties.
 */
message VirtualTransform {
  VirtualVector3 position = 1;
  VirtualVector3 rotation = 2;
  VirtualQuaternion rotation_quaternion = 3;
  VirtualVector3 scale = 4;
}

/**
 * VirtualMatrix is a matrix descriptor to be used in game object properties.
 */
message VirtualMatrix {
  repeated float values = 1;
  uint32 rows_count = 2;
  uint32 columns_count = 3;
}

/**
 * VirtualTexture is a texture descriptor to be used in material properties.
 */
message VirtualTexture {
  string guid = 1;
  string name = 2;
  float width = 3;
  float height = 4;
  bool is_invert_y = 5;

  /** Image texture(10-99) */
  string url = 10;
  /**
   * Base64 encoded texture data.
   * @deprecated
   */
  string base64_string = 11;
  bytes pixels = 12;
}

message VirtualGameObjectData {
  string parent_guid = 1;

  /** Mesh related fields(2-19) */
  repeated float mesh_vertices = 2;
  repeated int32 mesh_triangles = 3;
  repeated float mesh_normals_vertices = 4;
  repeated float mesh_tangents_vertices = 5;
  repeated float mesh_colors_vertices = 6;
  repeated float mesh_uvs_vertices = 7;
  repeated float mesh_uv2_vertices = 8;
  repeated float mesh_uv3_vertices = 9;
  repeated float mesh_uv4_vertices = 10;
  VirtualVector3 mesh_bounds_center = 15;
  VirtualVector3 mesh_bounds_size = 16;
  VirtualVector3 mesh_bounds_min = 17;
  VirtualVector3 mesh_bounds_max = 18;

  /** Material related fields(20-29) */
  int32 material_id = 20; // Reserved
  /**
   * FIXME: We don't sync material in the first frame?
   */

  /** Skeleton and bones(150-189) */
  bool skeleton_is_skinned_mesh = 150;
  repeated float skeleton_weights = 151;
  repeated float skeleton_indexes = 152;
  repeated VirtualMatrix skeleton_bindposes = 153; /** represents as Matrix4x4(16 floats) */
  repeated string skeleton_guid_of_bones = 154;

  /** Outline related fields(190-199) */
  bool outline_enabled = 190;
  repeated float outline_color = 191;
  float outline_width = 192;

  /** Collider related fields(800-899) */
  bool collider_enabled = 800;
  int32 collider_type = 801;

  /** line rendering related fields(900-999) */
  repeated float line_rendering_color_start = 900;
  repeated float line_rendering_color_end = 901;
  float line_rendering_width_start = 902;
  float line_rendering_width_end = 903;

  /** Particle related fields(1000-1299) */
  bool particle_system_enabled = 1000;
}

message VirtualGameObject {
  string guid = 1;
  string name = 2;
  string type = 3;
  VirtualTransform transform = 4;
  bool visibility = 5;
  VirtualGameObjectData data = 6;
}

/**
 * This is used to change the game object in the next frames, such as append a new Mesh to the tree, or remove a specific transform node.
 * There is no update change, because a change on game objects will be converted to `PropertyChangeOnGameObject`.
 */
message GameObjectChange {
  string target_object_guid = 1;
  int32 type = 2;                       /** 1: add, 2: remove */

  VirtualGameObject game_object = 10;   /** only used when type is 1(add), it represents the new game object */
  string parent_guid = 11;              /** only used when type is 1(add), it represents the new game object's parent */

  bool remove_children = 20;            /** only used when type is 2(remove), it represents whether to remove the children of the game object */
}

/**
 * This is used to change the property of the game object in the next frames, such as change the position of a transform node.
 */
message PropertyChangeOnGameObject {
  string target_object_guid = 1;
  string property_name = 2;

  /** The following fields are used to represent the changes of the game objects in the next frames. */
  VirtualVector3 vector3_value = 10;
  VirtualQuaternion quaternion_value = 11;
  /** more complex value update? */
  bool bool_value = 20;
  int32 int32_value = 21;
  float float_value = 22;
  string string_value = 23;
}

message MaterialSyncChangeOnGameObject {
  string target_object_guid = 1;
  string material_name = 2;
  int32 material_id = 3;
  string material_custom_type = 4; /** "Standard", "PBR" */

  /** Common(10-29) */
  float material_alpha = 10;
  int32 material_alpha_mode = 11;
  bool material_backface_culling = 12;
  int32 material_surface_type = 13;
  int32 material_blending_mode = 14;
  int32 material_render_face = 15;
  bool material_wireframe = 16;

  /** The following fields are used to represent the material changes of the game objects in the next frames. */
  /** Standard(30-99) */
  // Colors
  repeated float material_std_diffuse_color = 30;
  repeated float material_std_specular_color = 31;
  repeated float material_std_emissive_color = 32;
  repeated float material_std_ambient_color = 33;
  // Textures
  VirtualTexture material_std_diffuse_texture = 40;
  VirtualTexture material_std_specular_texture = 41;
  VirtualTexture material_std_emissive_texture = 42;
  VirtualTexture material_std_ambient_texture = 43;

  /** PBR(100-129) */
  // Properties
  float material_pbr_metallic = 100;
  float material_pbr_roughness = 101;
  // Colors
  repeated float material_pbr_albedo_color = 110;
  repeated float material_pbr_ambient_color = 111;
  repeated float material_pbr_emissive_color = 112;
  // Textures
  VirtualTexture material_pbr_albedo_texture = 120;
  VirtualTexture material_pbr_ambient_texture = 121;
  VirtualTexture material_pbr_emissive_texture = 122;
}

/**
 * The message represents the document metadata.
 */
message DocumentMetadata {
  /**
   * The XSML specification version, set via <xsml version="x.y"> by developer.
   */
  string spec_version = 1;
  /**
   * The document description.
   */
  string description = 2;
  /**
   * The document author.
   */
  string author = 3;
  /**
   * The document keywords.
   */
  string keywords = 4;
  /**
   * The document license.
   */
  string license = 5;
  /**
   * The document license url.
   */
  string license_url = 6;
  /**
   * The document viewport's initial scale, which is used to control the scale behaviour.
   */
  float viewport_initial_scale = 10;
}

/**
 * This is the root message of the GOM protocol.
 */
message VirtualGameObjectModel {
  /**
   * The Document title, this is used to represent the title of the document.
   */
  string title = 1;

  /**
   * The Document metadata, this is used to represent the metadata of the document.
   */
  DocumentMetadata metadata = 2;

  /// Describe the contents in this space.
  /**
   * Both TransformNodes/Meshes/Lights/Cameras/Canvases are here, these kinds of objects
   * are all game objects.
   */
  repeated VirtualGameObject game_objects = 10;

  /// Describe the changes of the game objects in the next frames.
  /**
   * The changes of the game objects, this is to represent the changes of the game objects in the next frames.
   */
  repeated GameObjectChange game_object_changes = 100;
  /**
   * The property changes of the game objects, this is to represent the changes of the game objects in the next frames.
   */
  repeated PropertyChangeOnGameObject property_changes_on_game_object = 101;
  /**
   * The material changes of the game objects, this is to represent the changes of the game objects in the next frames.
   */
  repeated MaterialSyncChangeOnGameObject material_changes_on_game_object = 102;
}
