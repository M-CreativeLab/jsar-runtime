name: Release

on:
  push:
    tags:
      - "amidala-v*.*.*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name for Release: amidala-v1.0.0'
        required: true

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.74.0
    - name: Install Rust targets
      run: |
        rustup target add aarch64-linux-android
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin
        rustup target add x86_64-pc-windows-msvc
    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
    - name: Set up Android NDK 17r
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: 'r17'
    - name: Set up Protoc
      uses: arduino/setup-protoc@v2
      with:
        version: "21.x"
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-node@v4.0.0
      with:
        node-version: 18.16.0
    - name: Install Node.js dependencies
      run: npm ci && npx tsc --version
    - name: Build JavaScript bundle
      run: |
        make jsbundle
    - name: Build library for Android
      run: |
        protoc --version
        make android
      env:
        USE_SYSTEM_PROTOC: "true"
    - name: Upload artifacts to aliyun OSS
      run: |
        tar -czvf jsar-runtime-android.tar.gz ./build/output/release/aarch64-linux-android
        node ./tools/upload-aliyun.mjs ${{ github.event.inputs.tag_name }} ./jsar-runtime-android.tar.gz
      env:
        ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
        ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        ALIYUN_BUCKET: ${{ secrets.ALIYUN_BUCKET }}

  build-macOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.74.0
    - name: Install Rust targets
      run: |
        rustup target add aarch64-linux-android
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin
        rustup target add x86_64-pc-windows-msvc
    - name: Set up Protoc
      uses: arduino/setup-protoc@v2
      with:
        version: "21.x"
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-node@v4.0.0
      with:
        node-version: 18.16.0
    - name: Install Node.js dependencies
      run: npm ci && npx tsc --version
    - name: Build JavaScript bundle
      run: |
        make jsbundle
    - name: Build library for macOS
      run: |
        protoc --version
        make darwin
      env:
        USE_SYSTEM_PROTOC: "true"
    - name: Upload artifacts to aliyun OSS
      run: |
        tar -czvf jsar-runtime-darwin.tar.gz ./build/output/release/universal-apple-darwin
        node ./tools/upload-aliyun.mjs ${{ github.event.inputs.tag_name }} ./jsar-runtime-darwin.tar.gz
      env:
        ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
        ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        ALIYUN_BUCKET: ${{ secrets.ALIYUN_BUCKET }}

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.74.0
    - name: Install Rust targets
      run: |
        rustup target add aarch64-linux-android
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin
        rustup target add x86_64-pc-windows-msvc
    - name: Set up Protoc
      uses: arduino/setup-protoc@v2
      with:
        version: "21.x"
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-node@v4.0.0
      with:
        node-version: 18.16.0
    - name: Install Node.js dependencies
      run: npm ci && npx tsc --version
    - name: Build JavaScript bundle
      run: |
        make jsbundle
    - name: Build library for Windows
      run: |
        make windows
      env:
        USE_SYSTEM_PROTOC: "true"
    - name: Upload artifacts to aliyun OSS
      run: |
        tar -czvf jsar-runtime-windows.tar.gz ./build/output/release/x86_64-pc-windows-msvc
        node ./tools/upload-aliyun.mjs ${{ github.event.inputs.tag_name }} ./jsar-runtime-windows.tar.gz
      env:
        ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
        ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        ALIYUN_BUCKET: ${{ secrets.ALIYUN_BUCKET }}

  release:
    runs-on: ubuntu-latest
    needs: [build-android, build-macOS, build-windows]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts from aliyun OSS
        run: |
          node ./tools/download-aliyun.mjs ${{ github.event.inputs.tag_name }} jsar-runtime-android.tar.gz
          node ./tools/download-aliyun.mjs ${{ github.event.inputs.tag_name }} jsar-runtime-darwin.tar.gz
          node ./tools/download-aliyun.mjs ${{ github.event.inputs.tag_name }} jsar-runtime-windows.tar.gz
          ls -lsh ./*.tar.gz
      - name: Create package
        run: |
          mkdir -p out/android && tar -xvf jsar-runtime-android.tar.gz -C out/android
          mkdir -p out/darwin && tar -xvf jsar-runtime-darwin.tar.gz -C out/darwin
          mkdir -p out/windows && tar -xvf jsar-runtime-windows.tar.gz -C out/windows
          mkdir -p out && cp -r src/proto out/
          tar -czvf jsar-runtime-release.tar.gz out/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src/proto/*.proto
            jsar-runtime-release.tar.gz
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.event.inputs.tag_name }}

  dispatch-loaders-build:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch jsar-loader-unity to build
        run: |
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          curl -L -X POST --verbose \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28"
            https://api.github.com/repos/M-CreativeLab/jsar-loader-unity/dispatches \
            --data '{"event_type":"dispatch-loaders-build","client_payload":{"jsar_runtime_version": "${{ inputs.tag_name }}"}}'
