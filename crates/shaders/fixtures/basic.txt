Module {
    types: {
        [1]: Type {
            name: None,
            inner: Vector {
                size: Bi,
                scalar: Scalar {
                    kind: Float,
                    width: 4,
                },
            },
        },
        [2]: Type {
            name: None,
            inner: Vector {
                size: Quad,
                scalar: Scalar {
                    kind: Float,
                    width: 4,
                },
            },
        },
        [3]: Type {
            name: None,
            inner: Struct {
                members: [
                    StructMember {
                        name: Some(
                            "vColor",
                        ),
                        ty: [2],
                        binding: Some(
                            Location {
                                location: 0,
                                second_blend_source: false,
                                interpolation: Some(
                                    Perspective,
                                ),
                                sampling: None,
                            },
                        ),
                        offset: 0,
                    },
                    StructMember {
                        name: None,
                        ty: [2],
                        binding: Some(
                            BuiltIn(
                                Position {
                                    invariant: false,
                                },
                            ),
                        ),
                        offset: 16,
                    },
                ],
                span: 32,
            },
        },
    },
    special_types: SpecialTypes {
        ray_desc: None,
        ray_intersection: None,
        predeclared_types: {},
    },
    constants: {},
    global_variables: {
        [1]: GlobalVariable {
            name: Some(
                "aVertexPosition",
            ),
            space: Private,
            binding: None,
            ty: [1],
            init: None,
        },
        [2]: GlobalVariable {
            name: Some(
                "uScalingFactor",
            ),
            space: Uniform,
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 0,
                },
            ),
            ty: [1],
            init: None,
        },
        [3]: GlobalVariable {
            name: Some(
                "uRotationVector",
            ),
            space: Uniform,
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 1,
                },
            ),
            ty: [1],
            init: None,
        },
        [4]: GlobalVariable {
            name: Some(
                "vColor",
            ),
            space: Private,
            binding: None,
            ty: [2],
            init: None,
        },
        [5]: GlobalVariable {
            name: Some(
                "gl_Position",
            ),
            space: Private,
            binding: None,
            ty: [2],
            init: None,
        },
    },
    const_expressions: {
        [1]: Literal(
            I32(
                0,
            ),
        ),
        [2]: Literal(
            I32(
                1,
            ),
        ),
    },
    functions: {
        [1]: Function {
            name: Some(
                "main",
            ),
            arguments: [],
            result: None,
            local_variables: {
                [1]: LocalVariable {
                    name: Some(
                        "rotatedPosition",
                    ),
                    ty: [1],
                    init: None,
                },
            },
            expressions: {
                [1]: GlobalVariable(
                    [1],
                ),
                [2]: GlobalVariable(
                    [2],
                ),
                [3]: GlobalVariable(
                    [3],
                ),
                [4]: GlobalVariable(
                    [4],
                ),
                [5]: Load {
                    pointer: [1],
                },
                [6]: AccessIndex {
                    base: [5],
                    index: 0,
                },
                [7]: Load {
                    pointer: [3],
                },
                [8]: AccessIndex {
                    base: [7],
                    index: 1,
                },
                [9]: Binary {
                    op: Multiply,
                    left: [6],
                    right: [8],
                },
                [10]: Load {
                    pointer: [1],
                },
                [11]: AccessIndex {
                    base: [10],
                    index: 1,
                },
                [12]: Load {
                    pointer: [3],
                },
                [13]: AccessIndex {
                    base: [12],
                    index: 0,
                },
                [14]: Binary {
                    op: Multiply,
                    left: [11],
                    right: [13],
                },
                [15]: Binary {
                    op: Add,
                    left: [9],
                    right: [14],
                },
                [16]: Load {
                    pointer: [1],
                },
                [17]: AccessIndex {
                    base: [16],
                    index: 1,
                },
                [18]: Load {
                    pointer: [3],
                },
                [19]: AccessIndex {
                    base: [18],
                    index: 1,
                },
                [20]: Binary {
                    op: Multiply,
                    left: [17],
                    right: [19],
                },
                [21]: Load {
                    pointer: [1],
                },
                [22]: AccessIndex {
                    base: [21],
                    index: 0,
                },
                [23]: Load {
                    pointer: [3],
                },
                [24]: AccessIndex {
                    base: [23],
                    index: 0,
                },
                [25]: Binary {
                    op: Multiply,
                    left: [22],
                    right: [24],
                },
                [26]: Binary {
                    op: Subtract,
                    left: [20],
                    right: [25],
                },
                [27]: Compose {
                    ty: [1],
                    components: [
                        [15],
                        [26],
                    ],
                },
                [28]: LocalVariable(
                    [1],
                ),
                [29]: GlobalVariable(
                    [5],
                ),
                [30]: Load {
                    pointer: [28],
                },
                [31]: Load {
                    pointer: [2],
                },
                [32]: Binary {
                    op: Multiply,
                    left: [30],
                    right: [31],
                },
                [33]: Literal(
                    F32(
                        0.0,
                    ),
                ),
                [34]: Literal(
                    F32(
                        1.0,
                    ),
                ),
                [35]: AccessIndex {
                    base: [32],
                    index: 0,
                },
                [36]: AccessIndex {
                    base: [32],
                    index: 1,
                },
                [37]: Compose {
                    ty: [2],
                    components: [
                        [35],
                        [36],
                        [33],
                        [34],
                    ],
                },
            },
            named_expressions: {},
            body: Block {
                body: [
                    Emit(
                        [5..27],
                    ),
                    Store {
                        pointer: [28],
                        value: [27],
                    },
                    Emit(
                        [30..32],
                    ),
                    Emit(
                        [35..37],
                    ),
                    Store {
                        pointer: [29],
                        value: [37],
                    },
                    Return {
                        value: None,
                    },
                ],
                span_info: [
                    Span {
                        start: 181,
                        end: 363,
                    },
                    Span {
                        start: 163,
                        end: 363,
                    },
                    Span {
                        start: 386,
                        end: 418,
                    },
                    Span {
                        start: 381,
                        end: 429,
                    },
                    Span {
                        start: 367,
                        end: 429,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                ],
            },
        },
    },
    entry_points: [
        EntryPoint {
            name: "main",
            stage: Vertex,
            early_depth_test: None,
            workgroup_size: [
                0,
                0,
                0,
            ],
            function: Function {
                name: None,
                arguments: [
                    FunctionArgument {
                        name: Some(
                            "aVertexPosition",
                        ),
                        ty: [1],
                        binding: Some(
                            Location {
                                location: 0,
                                second_blend_source: false,
                                interpolation: Some(
                                    Perspective,
                                ),
                                sampling: None,
                            },
                        ),
                    },
                ],
                result: Some(
                    FunctionResult {
                        ty: [3],
                        binding: None,
                    },
                ),
                local_variables: {},
                expressions: {
                    [1]: GlobalVariable(
                        [1],
                    ),
                    [2]: GlobalVariable(
                        [1],
                    ),
                    [3]: GlobalVariable(
                        [2],
                    ),
                    [4]: GlobalVariable(
                        [2],
                    ),
                    [5]: GlobalVariable(
                        [3],
                    ),
                    [6]: GlobalVariable(
                        [3],
                    ),
                    [7]: GlobalVariable(
                        [4],
                    ),
                    [8]: GlobalVariable(
                        [4],
                    ),
                    [9]: GlobalVariable(
                        [1],
                    ),
                    [10]: FunctionArgument(
                        0,
                    ),
                    [11]: GlobalVariable(
                        [4],
                    ),
                    [12]: Load {
                        pointer: [11],
                    },
                    [13]: GlobalVariable(
                        [5],
                    ),
                    [14]: Load {
                        pointer: [13],
                    },
                    [15]: Compose {
                        ty: [3],
                        components: [
                            [12],
                            [14],
                        ],
                    },
                },
                named_expressions: {},
                body: Block {
                    body: [
                        Store {
                            pointer: [9],
                            value: [10],
                        },
                        Call {
                            function: [1],
                            arguments: [],
                            result: None,
                        },
                        Emit(
                            [12..12],
                        ),
                        Emit(
                            [14..14],
                        ),
                        Emit(
                            [15..15],
                        ),
                        Return {
                            value: Some(
                                [15],
                            ),
                        },
                    ],
                    span_info: [
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                    ],
                },
            },
        },
    ],
}

ModuleInfo {
    type_flags: [
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | ARGUMENT | CONSTRUCTIBLE,
        ),
    ],
    functions: [
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: None,
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    WRITE,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 4,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [2],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Uniform,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 4,
                    assignable_global: Some(
                        [3],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Uniform,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [4],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [28],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [29],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [5],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [28],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [28],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [28],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [28],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Float,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [28],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [2],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
        },
    ],
    entry_points: [
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [11],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    READ | WRITE,
                ),
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    READ | WRITE,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [2],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Uniform,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [2],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Uniform,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [3],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Uniform,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [3],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Uniform,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [7],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [4],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [8],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: Some(
                        [4],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [9],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [10],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [11],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [4],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [11],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [2],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [13],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [5],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Private,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [13],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [2],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [11],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
        },
    ],
    const_expression_types: [
        Value(
            Scalar(
                Scalar {
                    kind: Sint,
                    width: 4,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Sint,
                    width: 4,
                },
            ),
        ),
    ],
}
